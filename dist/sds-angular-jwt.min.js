/*! 
 * sds-angular-jwt
 * Angular JWT framework
 * @version 0.6.4 
 * 
 * Copyright (c) 2016 David Benson, Steve Gentile 
 * @link https://github.com/SMARTDATASYSTEMSLLC/sds-angular-jwt 
 * @license  MIT 
 */

angular.module("sds-angular-jwt",["angular-jwt"]),function(){"use strict";angular.module("sds-angular-jwt").config(["$httpProvider",function(a){a.interceptors.push("authInterceptorService")}]).run(["$q","$location","$rootScope","authService","authConfig",function(a,b,c,d,e){function f(a){a.preventDefault(),i&&b.path(i)}function g(a,c,g){if(d.authentication.isAuth){if(h)b.url(h),h=null;else if(a){var j=!0;a.auth&&"boolean"!=typeof a.auth&&!e.permissionLookup(a.auth,d.authentication.data,c)&&(j=!1,i=i||"/"),j?a&&a.templateUrl&&(i=b.url()):f(g)}}else a&&a.auth!==!1?(a.redirectTo||(h=b.url()),b.path(e.loginUrl).replace()):b.path(b.path())}var h,i=e.loginUrl;c.$on("$routeChangeStart",function(a,b){b&&g(b.$$route,b.params,a)}),c.$on("$stateChangeStart",function(a,b,c){g(b,c,a)}),g(null,null)}])}(),function(){"use strict";function a(a,b,c,d,e){var f={},g=function(a){if(!a.cache&&".html"!==a.url.slice(-5)){var b=c.get("authService");a.headers=a.headers||{},b.authentication.isAuth&&(a.headers.Authorization="Bearer "+b.authentication.token),e.onLoadStart({config:a})}return a},h=function(a){return a.config.cache||".html"===a.config.url.slice(-5)||e.onLoadEnd({success:!0,config:a.config}),a},i=function(a){console.log(a)},j=function(){return d.path().indexOf("login")>-1||d.path().indexOf("registration")>-1},k=function(f){if(401===f.status&&!j()){var g=c.get("authService");g.authentication&&g.authentication.useRefreshTokens?g.refreshToken().then(function(){d.reload()},function(){d.path(e.loginUrl)}):(g.logOut(),d.path(e.loginUrl))}return 404===f.status&&e.notFoundUrl&&a(function(){d.path(e.notFoundUrl)},1e3),f.config.cache||".html"===f.config.url.slice(-5)||e.onLoadEnd({success:!1,config:f.config,status:f.status,message:f.data&&f.data.message,error:f.data&&f.data.error}),b.reject(f)};return f.request=g,f.response=h,f.requestError=i,f.responseError=k,f}a.$inject=["$timeout","$q","$injector","$location","authConfig"],angular.module("sds-angular-jwt").factory("authInterceptorService",a)}(),function(){"use strict";function a(){var a=this;a.onLoadStart=function(){},a.onLoadEnd=function(){},a.formatAuthData=function(a){return a},a.formatLoginParams=function(a,b){return{email:a,password:b}},a.permissionLookup=function(a,b,c){if(!b||!b.roles)return!1;if(b.su)return!0;var d=b.roles.map(function(a){return a.tenant_id}).indexOf(parseInt(c.tenantId));return-1===d?!1:b.roles[d]&&b.roles[d].permissions.access[a]},a.tokenUrl="/api/auth",a.refreshUrl="/api/auth/refresh",a.loginUrl="/login",a.notFoundUrl=null,a.localization={errorTitle:"There seems to be a problem",errorEmail:"A valid email address is required",errorPassword:"Password is required",errorPasswordMatch:"Passwords must match",errorConfirm:"Confirm Password is required",errorForgotPassword:"Error sending reset request. Please contact support.",errorLogin:"Could not validate your login credentials. Please try again.",errorLoginRejected:"Your email or password is invalid. Please try again.",errorRegister:"Error submitting registration. Please contact support.",errorResetPassword:"Error resetting password. Please contact support.",successForgotPasswordTitle:"Request Received",successForgotPassword:"An email will be sent to you with instructions to reset your password.",successRegisterTitle:"Registration Successful",successRegister:"A confirmation email has been sent to your email address.",successResetPasswordTitle:"Password Change Successful",successResetPassword:"Your password has been reset.",forgotPasswordText:"Enter your email address and we will send you a link to reset your password.",loginPage:"Return to login page",submit:"Submit",login:"Login",email:"Email Address",password:"Password",newPassword:"New Password",confirm:"Confirm Password"},a.$get=function(){return{onLoadStart:a.onLoadStart,onLoadEnd:a.onLoadEnd,permissionLookup:a.permissionLookup,formatLoginParams:a.formatLoginParams,formatAuthData:a.formatAuthData,tokenUrl:a.tokenUrl,refreshUrl:a.refreshUrl,loginUrl:a.loginUrl,notFoundUrl:a.notFoundUrl,localization:a.localization}},a.setFormatLoginParams=function(b){a.formatLoginParams=b},a.setFormatAuthData=function(b){a.formatAuthData=b},a.setRoutes=function(b){a.tokenUrl=b.tokenUrl||a.tokenUrl,a.refreshUrl=b.refreshUrl||a.refreshUrl,a.loginUrl=b.loginUrl||a.loginUrl,a.notFoundUrl=b.notFoundUrl||a.notFoundUrl},a.setLocalization=function(b){angular.extend(a.localization,b)},a.setOnLoadStart=function(b){if("function"!=typeof b)throw new Error("Parameter must be a function");a.onLoadStart=b},a.setOnLoadEnd=function(b){if("function"!=typeof b)throw new Error("Parameter must be a function");a.onLoadEnd=b},a.setPermissionLookup=function(b){if("function"!=typeof b)throw new Error("Parameter must be a function");a.permissionLookup=b},a.setLoginUrl=function(b){a.loginUrl=b},a.setNotFoundUrl=function(b){a.notFoundUrl=b},a.setRefreshUrl=function(b){a.refreshUrl=b},a.setTokenUrl=function(b){a.tokenUrl=b}}angular.module("sds-angular-jwt").provider("authConfig",a)}(),function(){"use strict";function a(a,b,c,d,e,f,g,h){var i={},j=function(){i.authentication={isAuth:!1,data:{},useRefreshToken:null,token:null},g.localStorage.removeItem("token")},k=function(a){i.authentication.isAuth=!0,i.authentication.token=a.token||a.access_token,i.authentication.useRefreshToken=a.refresh_token||null;var c=f.decodeToken(i.authentication.token);try{g.localStorage.setItem("token",i.authentication.token),g.localStorage.setItem("useRefreshToken",i.authentication.useRefreshToken)}catch(d){return j(),b.reject({message:"This application does not support private browsing mode. Please turn off private browsing to log in."})}return b.when(h.formatAuthData(c.data||c)).then(function(a){return i.authentication.data=a,g.localStorage.setItem("authData",g.btoa(JSON.stringify(i.authentication.data))),e.$broadcast("auth:userUpdate"),i.authentication})},l=function(){if(g.localStorage.getItem("token")){if(g.localStorage.getItem("authData"))try{i.authentication.data=JSON.parse(g.atob(g.localStorage.getItem("authData")))}catch(a){g.localStorage.removeItem("authData")}k({token:g.localStorage.getItem("token"),useRefreshToken:g.localStorage.getItem("useRefreshToken")})}};return i.authentication={isAuth:!1,data:{},useRefreshToken:null,token:null},i.login=function(){return b.when(h.formatLoginParams.apply(this,arguments)).then(function(b){return a.get("$http").post(h.tokenUrl,$.param(b),{headers:{"Content-Type":"application/x-www-form-urlencoded"}})}).then(function(a){return k(a.data)})},i.logOut=function(a){var f=b.defer();return c.info("logging out"),void 0===a&&(a=!0),i.authentication.userId?i.deleteToken().then(function(){j(),a&&(e.$broadcast("auth:userLogOff"),f.resolve())}):d(function(){j(),a&&(e.$broadcast("auth:userLogOff"),f.resolve())}),f.promise},i.deleteToken=function(){var b=h.tokenUrl+"/"+i.authentication.data.id;return a.get("$http")["delete"](b)},i.allowed=function(a,b){return h.permissionLookup(a,i.authentication.data,b)},i.is=i.allowed,i.refreshToken=function(){return b(function(b,c){if(g.localStorage.getItem("token")){var d=f.decodeToken(g.localStorage.getItem("token"));if(d&&d.useRefreshToken!==!1)return g.localStorage.removeItem("token"),a.get("$http").post(h.refreshUrl).then(function(a){return k(a.data).then(function(){return b()})},function(a){return i.logOut().then(function(){c(a)})})}return b()})},l(),i}a.$inject=["$injector","$q","$log","$timeout","$rootScope","jwtHelper","$window","authConfig"],angular.module("sds-angular-jwt").factory("authService",a)}(),function(){"use strict";function a(a,b,c,d,e){var f=this;f.loc=e.localization,f.loginUrl=f.loginUrl||e.loginUrl,f.isLoginPage=b.path()===f.loginUrl,f.success=!1,f.user={email:null},f.submit=function(e){f.message="",e.$valid&&(d.$broadcast("auth:submitStart"),a.when(f.onSubmit({user:f.user,form:e})).then(function(){d.$broadcast("auth:submitEnd"),f.success=!0,f.redirectUrl&&c(function(){b.path(f.redirectUrl)},3e3)},function(a){d.$broadcast("auth:submitEnd"),a.data&&a.data.message?f.message=a.data.message:a.message?f.message=a.message:f.message=f.loc.errorForgotPassword}))}}angular.module("sds-angular-jwt").component("authForgotPassword",{templateUrl:"sds-angular-jwt/directives/auth-forgot-password-component.html",controller:a,transclude:!0,bindings:{redirectUrl:"@",loginUrl:"@",onSubmit:"&"}})}(),function(){"use strict";function a(a,b,c,d){var e=this;e.loc=d.localization,e.user={email:null,password:null},e.submit=function(d){e.message="",d.$valid&&(b.$broadcast("auth:submitStart"),c.login(e.user.email,e.user.password).then(function(){b.$broadcast("auth:submitEnd"),c.authentication.data?"function"==typeof e.onLogin?e.onLogin({auth:c.authentication.data}):a.path(e.redirectUrl):e.message=e.loc.errorLogin},function(a){b.$broadcast("auth:submitEnd"),a.data&&a.data.message?e.message=a.data.message:e.message=e.loc.errorLoginRejected}))}}angular.module("sds-angular-jwt").component("authLogin",{templateUrl:"sds-angular-jwt/directives/auth-login-component.html",controller:a,transclude:!0,bindings:{redirectUrl:"@",onLogin:"&?"}})}(),function(){"use strict";function a(a,b,c,d,e,f){var g=this;g.loc=f.localization,g.loginUrl=g.loginUrl||f.loginUrl,g.isLoginPage=c.path()===g.loginUrl,g.user={email:null,password:null},g.submit=function(f){if(g.message="",f.$valid){for(var h in f)f.hasOwnProperty(h)&&"$"!==h[0]&&(g.user[h]=f[h].$modelValue);d.$broadcast("auth:submitStart"),a.when(g.onSubmit({user:g.user,form:f})).then(function(){return e.authentication.isAuth?(g.success=!0,void(g.redirectUrl&&b(function(){c.path(g.redirectUrl)},3e3))):e.login(g.user.email,g.user.password).then(function(){g.success=!0,g.redirectUrl&&c.path(g.redirectUrl)})}).then(function(){d.$broadcast("auth:submitStart")},function(a){d.$broadcast("auth:submitEnd"),a.data&&a.data.message?g.message=a.data.message:a.message?g.message=a.message:g.message=g.loc.errorRegister})}}}angular.module("sds-angular-jwt").component("authRegister",{templateUrl:"sds-angular-jwt/directives/auth-register-component.html",controller:a,transclude:!0,bindings:{redirectUrl:"@",loginUrl:"@",onSubmit:"&"}})}(),function(){"use strict";function a(a,b,c,d,e){var f=this;f.loc=e.localization,f.loginUrl=f.loginUrl||e.loginUrl,f.isLoginPage=b.path()===f.loginUrl,f.success=!1,f.user={password:null,confirmPassword:null},f.submit=function(e){if(f.message="",e.$valid)if(f.user.password!==f.user.confirmPassword)f.message=f.loc.errorPasswordMatch;else{var g=angular.copy(f.user);delete g.confirmPassword,g.token=f.token;for(var h in e)e.hasOwnProperty(h)&&"$"!==h[0]&&(g[h]=e[h].$modelValue);d.$broadcast("auth:submitStart"),a.when(f.onSubmit({user:g,form:e})).then(function(){f.success=!0,d.$broadcast("auth:submitEnd"),f.redirectUrl&&c(function(){b.path(f.redirectUrl)},3e3)},function(a){d.$broadcast("auth:submitEnd"),a.data&&a.data.message?f.message=a.data.message:a.message?f.message=a.message:f.message=f.loc.errorResetPassword})}}}angular.module("sds-angular-jwt").component("authResetPassword",{templateUrl:"sds-angular-jwt/directives/auth-reset-password-component.html",controller:a,transclude:!0,bindings:{redirectUrl:"@",loginUrl:"@",onSubmit:"&",token:"<"}})}(),angular.module("sds-angular-jwt").run(["$templateCache",function(a){"use strict";a.put("sds-angular-jwt/directives/auth-forgot-password-component.html",'<form name="authForm" ng-submit="$ctrl.submit(authForm)" novalidate> <div ng-if="!$ctrl.success"> <div class="alert alert-danger" ng-if="$ctrl.message || (authForm.$invalid && authForm.$submitted)"> <h4><i class="icon fa fa-warning"></i> {{$ctrl.loc.errorTitle}}</h4> {{$ctrl.message}} <div ng-show="authForm.email.$error.email || authForm.email.$error.required" ng-bind="$ctrl.loc.errorEmail"></div> </div> <p ng-bind="$ctrl.loc.forgotPasswordText"></p> <div class="form-group" ng-class="{ \'has-error\': (authForm.email.$invalid && authForm.$submitted) }"> <label class="control-label" for="email">{{$ctrl.loc.email}} * </label> <input class="form-control" type="email" name="email" id="email" ng-model="$ctrl.user.email" required> </div> <button type="submit" class="btn btn-primary pull-right" ng-bind="$ctrl.loc.submit"></button> <ng-transclude></ng-transclude> </div> <div class="alert alert-success" ng-if="$ctrl.success"> <h4><i class="icon fa fa-check"></i> {{$ctrl.loc.successForgotPasswordTitle}}</h4> <p ng-bind="$ctrl.loc.successForgotPassword"></p> <a ng-if="!$ctrl.isLoginPage" ng-href="{{$ctrl.loginUrl}}" ng-bind="$ctrl.loc.loginPage"></a> </div> </form>'),a.put("sds-angular-jwt/directives/auth-login-component.html",'<form name="authForm" ng-submit="$ctrl.submit(authForm)" novalidate> <div class="alert alert-danger" ng-if="$ctrl.message || (authForm.$invalid && authForm.$submitted)"> <h4><i class="icon fa fa-warning"></i> {{$ctrl.loc.errorTitle}}</h4> {{$ctrl.message}} <div ng-show="authForm.email.$error.email || authForm.email.$error.required" ng-bind="$ctrl.loc.errorEmail"></div> <div ng-show="authForm.password.$error.required" ng-bind="$ctrl.loc.errorPassword"></div> </div> <div class="form-group" ng-class="{ \'has-error\': (authForm.email.$invalid && authForm.$submitted) }"> <label class="control-label" for="email">{{$ctrl.loc.email}} * </label> <input class="form-control" type="email" name="email" id="email" ng-model="$ctrl.user.email" required> </div> <div class="form-group" ng-class="{ \'has-error\': (authForm.password.$invalid && authForm.$submitted) }"> <label class="control-label" for="password">{{$ctrl.loc.password}} *</label> <input class="form-control" type="password" name="password" id="password" ng-model="$ctrl.user.password" required> </div> <button type="submit" class="btn btn-primary pull-right" ng-bind="$ctrl.loc.login">Login</button> <ng-transclude></ng-transclude> </form>'),a.put("sds-angular-jwt/directives/auth-register-component.html",'<form name="authForm" ng-submit="$ctrl.submit(authForm)" novalidate> <div ng-if="!$ctrl.success"> <div class="alert alert-danger" ng-if="$ctrl.message || (authForm.$invalid && authForm.$submitted)"> <h4><i class="icon fa fa-warning"></i> {{$ctrl.loc.errorTitle}}</h4> {{$ctrl.message}} <div ng-show="authForm.email.$error.email || authForm.email.$error.required" ng-bind="$ctrl.loc.errorEmail"></div> <div ng-show="authForm.password.$error.required" ng-bind="$ctrl.loc.errorPassword"></div> </div> <div class="form-group" ng-class="{ \'has-error\': (authForm.email.$invalid && authForm.$submitted) }"> <label class="control-label" for="email">{{$ctrl.loc.email}} * </label> <input class="form-control" type="email" name="email" id="email" ng-model="$ctrl.user.email" required> </div> <div class="form-group" ng-class="{ \'has-error\': (authForm.password.$invalid && authForm.$submitted) }"> <label class="control-label" for="password">{{$ctrl.loc.password}} *</label> <input class="form-control" type="password" name="password" id="password" ng-model="$ctrl.user.password" required> </div> <ng-transclude></ng-transclude> <button type="submit" class="btn btn-primary pull-right" ng-bind="$ctrl.loc.submit"></button> </div> <div class="alert alert-success" ng-if="$ctrl.success"> <h4><i class="icon fa fa-check"></i> {{$ctrl.loc.successRegisterTitle}}</h4> <p ng-bind="$ctrl.loc.successRegister"></p> <a ng-if="!$ctrl.isLoginPage" ng-href="{{$ctrl.loginUrl}}" ng-bind="$ctrl.loc.loginPage"></a> </div> </form>'),a.put("sds-angular-jwt/directives/auth-reset-password-component.html",'<form name="authForm" ng-submit="$ctrl.submit(authForm)" novalidate> <div ng-if="!$ctrl.success"> <div class="alert alert-danger" ng-if="$ctrl.message || (authForm.$invalid && authForm.$submitted)"> <h4><i class="icon fa fa-warning"></i> {{$ctrl.loc.errorTitle}}</h4> {{$ctrl.message}} <div ng-show="authForm.password.$error.required" ng-bind="$ctrl.loc.errorPassword"></div> <div ng-show="authForm.confirmPassword.$error.required" ng-bind="$ctrl.loc.errorConfirm"></div> </div> <ng-transclude></ng-transclude> <div class="form-group" ng-class="{ \'has-error\': (authForm.password.$invalid && authForm.$submitted) }"> <label class="control-label" for="password">{{$ctrl.loc.newPassword}} *</label> <input class="form-control" type="password" name="password" id="password" ng-model="$ctrl.user.password" required> </div> <div class="form-group" ng-class="{ \'has-error\': (authForm.password.$invalid && authForm.$submitted) }"> <label class="control-label" for="confirmPassword">{{$ctrl.loc.confirm}} *</label> <input class="form-control" type="password" name="confirmPassword" id="confirmPassword" ng-model="$ctrl.user.confirmPassword" required> </div> <button type="submit" class="btn btn-primary pull-right" ng-bind="$ctrl.loc.submit"></button> </div> <div class="alert alert-success" ng-if="$ctrl.success"> <h4><i class="icon fa fa-check"></i> {{$ctrl.loc.successResetPasswordTitle}}</h4> <p ng-bind="$ctrl.loc.successResetPassword"></p> <a ng-if="!$ctrl.isLoginPage" ng-href="{{$ctrl.loginUrl}}" ng-bind="$ctrl.loc.loginPage"></a> </div> </form>')}]);
//# sourceMappingURL=sds-angular-jwt.min.js.map